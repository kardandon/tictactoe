{"version":3,"sources":["nav.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","style","float","href","className","PIXI","SCALE_MODE","NEAREST","WIDTH","key","Brick","stats","interactive","pointerdown","onClick","col","num","draw","g","beginFill","lineStyle","drawRoundedRect","posx","posy","width","height","endFill","Game","props","Restart","setTimeout","go","this","Player1","Won","bot2","bot1","act","choose_action","brick_num","console","log","move","state","action","s","i","length","Q","actions","j","best_act","max_q","start","get_q_value","q","tempbricks","bricknum","slice","id","Math","floor","HEIGHT","bricks","forceUpdate","array","sumArray","constructBricks","textAlign","display","alignItems","justifyContent","padding","class","type","message","paddingTop","options","backgroundColor","antialias","map","brick","handleClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gy7EAeeA,MAXf,WACI,OACG,gCACI,oBAAIC,MAAO,CAACC,MAAO,QAAnB,SAA4B,mBAAGC,KAAK,8BAAR,wCAC5B,oBAAIC,UAAU,YAAd,SACI,qBAAIA,UAAU,iBAAd,cAAgC,mBAAGD,KAAK,+BAAR,6B,sECJ/CE,IAAcC,WAAaD,IAAiBE,QAC5C,IAAMC,EAAQ,KAEVC,EAAM,EAgBJC,EAAQ,SAACC,GAEX,OADAF,GAAO,EAEP,cAAC,WAAD,CAEAG,aAAa,EACbC,YAAc,kBAAKF,EAAMG,QAAQ,GAAKH,EAAMI,IAAMJ,EAAMK,MACxDA,IAAKL,EAAMK,IACXD,IAAKJ,EAAMI,IACPE,KAAQ,SAAAC,GACJA,EAAEC,UAAU,EAAU,GACtBD,EAAEE,UAAU,EAAG,EAAU,GACzBF,EAAEG,gBAAgBV,EAAMW,KAAMX,EAAMY,KAAMZ,EAAMa,MAAOb,EAAMc,QAC7DP,EAAEQ,YATLjB,IA4LMkB,E,kDArKX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,UAFU,E,iEAIE,IAAD,OAChBC,YAAW,WAAO,EAAKC,OAAQ,O,2BAG/B,GAAIC,KAAKC,SAAYD,KAAKE,MAAOF,KAAKG,MAMjC,GAAGH,KAAKC,UAAYD,KAAKE,KAAOF,KAAKI,KAC1C,CACI,IAAIC,EAAML,KAAKM,cAAcN,KAAKO,WAClCC,QAAQC,IAAIJ,EAAI,GAAIA,EAAI,GAAK,GAC7BL,KAAKU,KAAKL,EAAI,GAAIA,EAAI,GAAK,QAT/B,CACI,IAAIA,EAAML,KAAKM,cAAcN,KAAKO,WAClCC,QAAQC,IAAIJ,EAAI,GAAIA,EAAI,GAAK,GAC7BL,KAAKU,KAAKL,EAAI,GAAIA,EAAI,GAAK,M,kCASvBM,EAAOC,GAGf,IADA,IAAIC,EAAI,KACCC,EAAI,EAAGA,EAAGH,EAAMI,OAAS,EAAGD,IAEjCD,GAAKF,EAAMG,GACXD,GAAK,KAQT,OANAA,GAAKF,EAAMA,EAAMI,OAAS,GAC1BF,GAAK,OACLA,GAAKD,EAAO,GACZC,GAAK,KACLA,GAAKD,EAAO,GAELI,EADPH,GAAK,Q,oCAGKF,GAGV,IADA,IAAIM,EAAU,GACLH,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAE9B,IAAK,IAAII,EAAI,EAAGA,EAAIP,EAAMG,GAAK,EAAGI,IAE9BD,EAAO,sBAAOA,GAAP,CAAgB,CAACH,EAAGI,KAMnC,IAHA,IAAIC,EAAW,GACXC,EAAQ,EACRC,GAAQ,EACHP,EAAI,EAAGA,EAAIG,EAAQF,OAAQD,IAEhC,GAAIO,EAEAA,GAAQ,EACRD,EAAQpB,KAAKsB,YAAYX,EAAMM,EAAQH,IACvCK,EAAWF,EAAQH,OAJvB,CAOA,IAAIS,EAAIvB,KAAKsB,YAAYX,EAAOM,EAAQH,IACpCS,EAAIH,IAEJA,EAAQG,EACRJ,EAAWF,EAAQH,IAG3B,OAAQK,I,wCAKR,IAFA,IAAIK,EAAa,GACbC,EAAWzB,KAAKO,UAAUmB,QACrBZ,EAAE,EAAGA,EAAIW,EAASV,OAAQD,IAE/B,IAAI,IAAII,EAAE,EAAGA,EAAIO,EAASX,GAAII,IAE1BM,EAAU,sBAAOA,GAAP,CAAmB,CACzBzC,IAAK+B,EACL9B,IAAKkC,EACLS,GAAI,GAAGb,EAAGI,EACV1B,MAAOoC,KAAKC,MAAMrD,GAA2B,EAAlBiD,EAASV,SACpCtB,OAAQ,GACRH,KAAMsC,KAAKC,MAAOrD,GAA4B,EAAlBiD,EAASV,SAAmB,EAAJD,EAAQ,KAC5DvB,KAAMuC,IAAe,GAAKZ,KAItClB,KAAK+B,OAASP,EACdxB,KAAKgC,gB,2BAEJjD,EAAKC,GACFgB,KAAKO,UAAUxB,GAAOC,EAAM,IAChCgB,KAAKO,UAAUxB,IAAQC,EAAM,EAC7BgB,KAAKC,SAAUD,KAAKC,QACY,GAtGvB,SAACgC,GAEd,IADA,IAAIpB,EAAI,EACCC,EAAE,EAAGA,EAAEmB,EAAMlB,OAAOD,IAEzBD,GAAIoB,EAAMnB,GAEd,OAAOD,EAgGCqB,CAASlC,KAAKO,aAAiBP,KAAKE,IAAMF,KAAKC,QAAU,EAAI,GACjED,KAAKmC,qB,kCAEGR,GACR,IAAI5C,EAAM6C,KAAKC,MAAMF,EAAG,IACpB3C,EAAM2C,EAAG,GACb3B,KAAKU,KAAK3B,EAAKiB,KAAKO,UAAUxB,GAAOC,EAAM,K,gCAG3CgB,KAAKqB,OAAO,EACZrB,KAAKC,SAAS,EACdD,KAAKO,UAAW,CAAC,EAAG,EAAG,EAAG,GAC1BP,KAAK+B,OAAQ,GACb/B,KAAKE,IAAK,EACVF,KAAKI,MAAO,EACZJ,KAAKG,MAAO,EACZH,KAAKmC,oB,+BAEA,IAAD,OACJ,GAAInC,KAAKqB,MAGL,OADArB,KAAKqB,OAAQ,EAET,gCACA,qBAAKpD,MAAO,CAACmE,UAAW,UAAxB,SACI,8EAEJ,qBAAKnE,MAAO,CAACmE,UAAW,UAAxB,SACQ,sBAAKnE,MAAO,CAACoE,QAAS,cAAeC,WAAY,UAAjD,UACJ,mBAAGrE,MAAO,CAACsE,eAAgB,eAAgBC,QAAS,QAApD,8BACA,wBAAOC,MAAM,SAAb,UACI,uBAAO3D,QAAS,WAAO,EAAKsB,MAAQ,EAAKA,MAAOsC,KAAK,aACrD,sBAAMD,MAAM,oBAEhB,mBAAGxE,MAAO,CAACuE,QAAS,QAApB,8BACA,wBAAOC,MAAM,SAAb,UACI,uBAAO3D,QAAS,WAAO,EAAKqB,MAAQ,EAAKA,MAAOuC,KAAK,aACrD,sBAAMD,MAAM,yBAIpB,qBAAKxE,MAAO,CAACmE,UAAW,UAAxB,SACI,wBAAQhE,UAAU,mBAAmBU,QAAS,kBAAM,EAAKqD,mBAAzD,8BAKZ,IAAIQ,EAAU3C,KAAKC,QAAU,WAAa,WAC1C,OAAID,KAAKE,KACLyC,GAAW,OAEP,sBAAK1E,MAAO,CAACmE,UAAW,UAAxB,UACI,qBAAInE,MAAO,CAAC2E,WAAY,QAAxB,cAAmCD,KACnC,wBAAQvE,UAAU,mBAAmBU,QAAS,kBAAM,EAAKe,WAAzD,+BAKZ,sBAAK5B,MAAO,CAACmE,UAAW,UAAxB,UACI,qBAAInE,MAAO,CAAC2E,WAAY,QAAxB,cAAmCD,KACvC,cAAC,QAAD,CAAOnD,MAAOhB,EAAOiB,OArMd,IAqM8BoD,QAAS,CAAEC,gBAAiB,SAAUC,WAAW,GAAtF,SAEQ/C,KAAK+B,OAAOiB,KAAI,SAAAC,GACZ,OACA,cAAC,EAAD,CAAOnE,QAAS,SAACgC,GAAD,OAAO,EAAKoC,YAAYpC,IAAI/B,IAAKkE,EAAMlE,IAAKC,IAAKiE,EAAMjE,IAAKQ,MAAOyD,EAAMzD,MAAOF,KAAM2D,EAAM3D,KAAMC,KAAM0D,EAAM1D,KAAME,OAAQwD,EAAMxD,qB,GA9JnJ0D,IAAMC,WCtCVC,MARf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ffa8ce44.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n    return (\r\n       <nav>\r\n           <h3 style={{float: \"left\"}}><a href=\"https://kardandon.github.io\">Emre Küçükkaya </a></h3>\r\n           <ul className=\"nav-links\">\r\n               <li className=\"nav-links-list\"> <a href=\"https://github.com/kardandon\">About </a></li>\r\n           </ul>\r\n       </nav> \r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { useState } from \"react\";\r\nimport { Stage, Sprite , Container, useTick, Graphics} from '@inlet/react-pixi'\r\nimport * as PIXI from 'pixi.js';\r\nimport Q from './Q.json';\r\n\r\nPIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\r\nconst WIDTH = 1280;\r\nconst HEIGHT = 720;\r\nlet key = 0;\r\n\r\nconst RotatingBunny = () => {\r\n    const [rotation, setRotation] = useState(0);\r\n\r\n    useTick((delta) => delta && setRotation(rotation - 0.1 * delta));\r\n\r\n    return(\r\n        <Sprite\r\n      image=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png\"\r\n      anchor={0.5}\r\n      scale={4}\r\n      rotation={rotation}\r\n    />\r\n    );\r\n}\r\nconst Brick = (stats) => {\r\n    key += 1;\r\n    return(\r\n    <Graphics \r\n    key={key}\r\n    interactive={true}\r\n    pointerdown={ ()=> stats.onClick(10 * stats.col + stats.num)}\r\n    num={stats.num}\r\n    col={stats.col}\r\n        draw ={ g => {\r\n            g.beginFill(0x000000, 1)\r\n            g.lineStyle(2, 0x000000, 1)\r\n            g.drawRoundedRect(stats.posx, stats.posy, stats.width, stats.height)\r\n            g.endFill()\r\n        }}\r\n    />\r\n    )\r\n}\r\nconst sumArray = (array) => {\r\n    var s = 0;\r\n    for (let i=0; i<array.length;i++)\r\n    {\r\n        s+= array[i];\r\n    }\r\n    return(s);\r\n}\r\nclass Game extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.Restart();\r\n    }\r\n    componentDidUpdate(){\r\n        setTimeout(() => {this.go();}, 500);\r\n    }\r\n    go(){\r\n        if(!this.Player1 && !this.Won && this.bot2)\r\n        {\r\n            let act = this.choose_action(this.brick_num);\r\n            console.log(act[0], act[1] - 1);\r\n            this.move(act[0], act[1] - 1);  \r\n        }\r\n        else if(this.Player1 && !this.Won && this.bot1)\r\n        {\r\n            let act = this.choose_action(this.brick_num);\r\n            console.log(act[0], act[1] - 1);\r\n            this.move(act[0], act[1] - 1);  \r\n        }\r\n    }\r\n    get_q_value(state, action)\r\n    {\r\n        let s = \"((\";\r\n        for (let i = 0; i< state.length - 1; i++)\r\n        {\r\n            s += state[i];\r\n            s += \", \"\r\n        }\r\n        s += state[state.length - 1];\r\n        s += \"), (\";\r\n        s += action[0];\r\n        s += \", \";\r\n        s += action[1];\r\n        s += \"))\";\r\n        return Q[s]\r\n    }\r\n    choose_action(state)\r\n    {\r\n        let actions = []\r\n        for (let i = 0; i < state.length; i++)\r\n        {\r\n            for (let j = 1; j < state[i] + 1; j++)\r\n            {\r\n                actions = [...actions, [i, j]];\r\n            }\r\n        }\r\n        let best_act = [];\r\n        let max_q = 0;\r\n        let start = true;\r\n        for (let i = 0; i < actions.length; i++)\r\n        {\r\n            if (start)\r\n            {\r\n                start = false;\r\n                max_q = this.get_q_value(state,actions[i]);\r\n                best_act = actions[i];\r\n                continue\r\n            }\r\n            let q = this.get_q_value(state, actions[i]);\r\n            if (q > max_q)\r\n            {\r\n                max_q = q;\r\n                best_act = actions[i];\r\n            }\r\n        }\r\n        return (best_act)\r\n    }\r\n    constructBricks(){\r\n        let tempbricks = []\r\n        let bricknum = this.brick_num.slice();\r\n        for (let i=0; i < bricknum.length; i++)\r\n        {\r\n            for(let j=0; j < bricknum[i]; j++)\r\n            {\r\n                tempbricks = [...tempbricks, {\r\n                    col: i,\r\n                    num: j,\r\n                    id: 10*i +j,\r\n                    width: Math.floor(WIDTH / (bricknum.length * 2)),\r\n                    height: 60,\r\n                    posx: Math.floor((WIDTH) / (bricknum.length * 2) * (i * 2 + 0.5)),\r\n                    posy: HEIGHT * 0.8 - 70 * j\r\n                }];\r\n            }\r\n        }\r\n        this.bricks = tempbricks;\r\n        this.forceUpdate();\r\n    }\r\n    move(col, num){\r\n        if (this.brick_num[col] < num + 1) return;\r\n        this.brick_num[col] -= num + 1;\r\n        this.Player1= !this.Player1;\r\n        if (sumArray(this.brick_num) == 0) this.Won = this.Player1 ? 1 : 2;\r\n        this.constructBricks();\r\n    }\r\n    handleClick(id){\r\n        let col = Math.floor(id/10);\r\n        let num = id%10\r\n        this.move(col, this.brick_num[col] - num - 1);\r\n    }\r\n    Restart(){\r\n        this.start= true;\r\n        this.Player1= true;\r\n        this.brick_num= [1, 3, 5, 7];\r\n        this.bricks= [];\r\n        this.Won= 0;\r\n        this.bot1 = false;\r\n        this.bot2 = false;\r\n        this.constructBricks();\r\n    }\r\n    render(){\r\n        if (this.start)\r\n        {\r\n            this.start = false;\r\n            return(\r\n                <div>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <h1> This AI is trained itself for 10000 times</h1>\r\n                </div>\r\n                <div style={{textAlign: 'center'}}>\r\n                        <div style={{display: 'inline-flex', alignItems: 'center'}}>\r\n                    <p style={{justifyContent: 'space-around', padding: '10px'}}> Player1 is bot:</p>\r\n                    <label class=\"switch\">\r\n                        <input onClick={() => {this.bot1 = !this.bot1}} type=\"checkbox\"/>\r\n                        <span class=\"slider round\"/>\r\n                    </label>\r\n                    <p style={{padding: '10px'}}> Player2 is bot:</p>\r\n                    <label class=\"switch\">\r\n                        <input onClick={() => {this.bot2 = !this.bot2}} type=\"checkbox\"/>\r\n                        <span class=\"slider round\"/>\r\n                    </label>\r\n                </div>\r\n                </div>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <button className=\"game-info-button\" onClick={() => this.constructBricks()}> Start game</button>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        let message = this.Player1 ? \"Player 1\" : \"Player 2\";\r\n        if (this.Won) {\r\n            message += \" Won\";\r\n            return(\r\n                <div style={{textAlign: 'center'}}>\r\n                    <h1 style={{paddingTop: '20px'}}> {message}</h1>\r\n                    <button className=\"game-info-button\" onClick={() => this.Restart()}> Restart game</button>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n        <div style={{textAlign: 'center'}}>\r\n            <h1 style={{paddingTop: '20px'}}> {message}</h1>\r\n        <Stage width={WIDTH} height={HEIGHT} options={{ backgroundColor: 0xFFFFFF, antialias: true}}>\r\n            {\r\n                this.bricks.map(brick => {\r\n                    return(\r\n                    <Brick onClick={(i) => this.handleClick(i)} col={brick.col} num={brick.num} width={brick.width} posx={brick.posx} posy={brick.posy} height={brick.height}/>)\r\n                })\r\n            }\r\n          </Stage>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Game;","import React from \"react\";\n//import {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Nav from \"./nav\";\nimport Game from \"./Game.js\"\nfunction App() {\n  return (\n    <div>\n      <Nav/>\n      <Game/>\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}